from typing import Dict, List

import numpy as np
import torch
import torch.nn.functional as F
from transformers.modeling_outputs import SequenceClassifierOutput


class StanceClassificationPostprocessor:
    """Create labels for the predictions generated by StanceClassificationModel."""

    def __call__(
        self,
        inputs: List[str],
        outputs: SequenceClassifierOutput,
    ) -> Dict[str, List[str]]:
        """Create labels for the predictions generated by the model.

        Args:
            inputs (List[str]): Conversation thread used as input data of model inference.
            outputs (SequenceClassifierOutput): Logits that the model generated.

        Returns:
            Dict[str, List[str]]: Prediction labels.
        """

        ID_TO_LABEL = {
            1: "DENY",
            2: "SUPPORT",
            3: "QUERY",
            4: "COMMENT",
        }
        logits = torch.argmax(F.log_softmax(outputs.logits, dim=2), dim=2)
        logits = logits.detach().cpu().numpy()

        return {
            "tweets": inputs,
            "preds": [ID_TO_LABEL[logits[0][j]] for j in range(len(inputs))],
        }


class RumourVerificationPostprocessor:
    """Create labels for the predictions generated by RumourVerificationModel."""

    def __call__(
        self,
        outputs: SequenceClassifierOutput,
    ) -> Dict[str, str]:
        """Create labels for the predictions generated by the model.

        Args:
            outputs (SequenceClassifierOutput): Logits that the model generated.

        Returns:
            Dict[str, str]: Prediction label.
        """

        ID_TO_LABEL = {
            0: "FALSE",
            1: "TRUE",
            2: "UNVERIFIED",
        }
        logits = np.argmax(outputs.logits.detach().cpu().numpy(), axis=1)

        return {"pred": ID_TO_LABEL[logits[0]]}
